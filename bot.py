from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = "7978854259:AAFx7lEricXAZBMFWVE0D8W3WgbWph5CIaY"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

queue = {"10:00": [], "13:00": []}  # –ß–µ—Ä–≥–∞ –∑–∞ —á–∞—Å–∞–º–∏

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
kb_main = ReplyKeyboardMarkup(resize_keyboard=True)
kb_main.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è"), KeyboardButton("–°–ø–∏—Å–æ–∫"))

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É —á–∞—Å—É
kb_time = ReplyKeyboardMarkup(resize_keyboard=True)
kb_time.add(KeyboardButton("10:00"), KeyboardButton("13:00"), KeyboardButton("–ù–∞–∑–∞–¥"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=kb_main)

@dp.message_handler(lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
async def choose_time(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É:", reply_markup=kb_time)

@dp.message_handler(lambda message: message.text in ["10:00", "13:00"])
async def join_queue(message: types.Message):
    time_slot = message.text
    user_name = message.from_user.full_name
    
    if user_name not in queue[time_slot]:
        queue[time_slot].append(user_name)
        await message.answer(f"{user_name}, –≤–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {time_slot}! –í–∞—à –Ω–æ–º–µ—Ä: {len(queue[time_slot])}.", reply_markup=kb_main)
    else:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü–µ–π —á–∞—Å!", reply_markup=kb_main)

@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫")
async def show_queue(message: types.Message):
    queue_list = "\n".join([f"‚è∞ {time}:\n" + "\n".join([f"{i+1}. {name}" for i, name in enumerate(queue[time])]) if queue[time] else f"‚è∞ {time}: (–ø–æ—Ä–æ–∂–Ω—å–æ)" for time in queue])
    await message.answer(f"üìã –ß–µ—Ä–≥–∞ –Ω–∞ –¥—É—à:\n\n{queue_list}")

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=kb_main)

@dp.message_handler(commands=['clear'])
async def clear_queue(message: types.Message):
    for time in queue:
        queue[time] = []
    await message.answer("–ß–µ—Ä–≥—É –æ—á–∏—â–µ–Ω–æ!")

if name == 'main':
    executor.start_polling(dp, skip_updates=True)